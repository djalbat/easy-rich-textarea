"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _easy = require("easy");
var BLUR_EVENT_TYPE = _easy.eventTypes.BLUR_EVENT_TYPE, FOCUS_EVENT_TYPE = _easy.eventTypes.FOCUS_EVENT_TYPE, SCROLL_EVENT_TYPE = _easy.eventTypes.SCROLL_EVENT_TYPE, CHANGE_EVENT_TYPE = _easy.eventTypes.CHANGE_EVENT_TYPE;
function onBlur(blurHandler, element) {
    var eventType = BLUR_EVENT_TYPE, handler = blurHandler; ///
    this.addEventListener(eventType, handler, element);
}
function onFocus(blurHandler, element) {
    var eventType = FOCUS_EVENT_TYPE, handler = blurHandler; ///
    this.addEventListener(eventType, handler, element);
}
function onScroll(scrollHandler, element) {
    var eventType = SCROLL_EVENT_TYPE, handler = scrollHandler; ///
    this.addEventListener(eventType, handler, element);
}
function onChange(changeHandler, element) {
    var eventType = CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offBlur(blurHandler, element) {
    var eventType = BLUR_EVENT_TYPE, handler = blurHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function offFocus(blurHandler, element) {
    var eventType = FOCUS_EVENT_TYPE, handler = blurHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function offScroll(scrollHandler, element) {
    var eventType = SCROLL_EVENT_TYPE, handler = scrollHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function offChange(changeHandler, element) {
    var eventType = CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.removeEventListener(eventType, handler, element);
}
var eventMixins = {
    onBlur: onBlur,
    onFocus: onFocus,
    onScroll: onScroll,
    onChange: onChange,
    offBlur: offBlur,
    offFocus: offFocus,
    offScroll: offScroll,
    offChange: offChange
};
var _default = eventMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGV2ZW50VHlwZXMgfSBmcm9tIFwiZWFzeVwiO1xuXG5jb25zdCB7IEJMVVJfRVZFTlRfVFlQRSwgRk9DVVNfRVZFTlRfVFlQRSwgU0NST0xMX0VWRU5UX1RZUEUsIENIQU5HRV9FVkVOVF9UWVBFIH0gPSBldmVudFR5cGVzO1xuXG5mdW5jdGlvbiBvbkJsdXIoYmx1ckhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gQkxVUl9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gYmx1ckhhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25Gb2N1cyhibHVySGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBGT0NVU19FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gYmx1ckhhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25TY3JvbGwoc2Nyb2xsSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBTQ1JPTExfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IHNjcm9sbEhhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25DaGFuZ2UoY2hhbmdlSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBDSEFOR0VfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGNoYW5nZUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmQmx1cihibHVySGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBCTFVSX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBibHVySGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZGb2N1cyhibHVySGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBGT0NVU19FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gYmx1ckhhbmRsZXI7ICAvLy9cblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmU2Nyb2xsKHNjcm9sbEhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gU0NST0xMX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBzY3JvbGxIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkNoYW5nZShjaGFuZ2VIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IENIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5jb25zdCBldmVudE1peGlucyA9IHtcbiAgb25CbHVyLFxuICBvbkZvY3VzLFxuICBvblNjcm9sbCxcbiAgb25DaGFuZ2UsXG4gIG9mZkJsdXIsXG4gIG9mZkZvY3VzLFxuICBvZmZTY3JvbGwsXG4gIG9mZkNoYW5nZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZXZlbnRNaXhpbnM7XG4iXSwibmFtZXMiOlsiQkxVUl9FVkVOVF9UWVBFIiwiZXZlbnRUeXBlcyIsIkZPQ1VTX0VWRU5UX1RZUEUiLCJTQ1JPTExfRVZFTlRfVFlQRSIsIkNIQU5HRV9FVkVOVF9UWVBFIiwib25CbHVyIiwiYmx1ckhhbmRsZXIiLCJlbGVtZW50IiwiZXZlbnRUeXBlIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkZvY3VzIiwib25TY3JvbGwiLCJzY3JvbGxIYW5kbGVyIiwib25DaGFuZ2UiLCJjaGFuZ2VIYW5kbGVyIiwib2ZmQmx1ciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvZmZGb2N1cyIsIm9mZlNjcm9sbCIsIm9mZkNoYW5nZSIsImV2ZW50TWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkF5RUE7OztlQUFBOzs7b0JBdkUyQjtBQUUzQixJQUFRQSxrQkFBNEVDLGdCQUFVLENBQXRGRCxpQkFBaUJFLG1CQUEyREQsZ0JBQVUsQ0FBckVDLGtCQUFrQkMsb0JBQXlDRixnQkFBVSxDQUFuREUsbUJBQW1CQyxvQkFBc0JILGdCQUFVLENBQWhDRztBQUU5RCxTQUFTQyxPQUFPQyxXQUFXLEVBQUVDLE9BQU87SUFDbEMsSUFBTUMsWUFBWVIsaUJBQ1pTLFVBQVVILGFBQWMsR0FBRztJQUVqQyxJQUFJLENBQUNJLGdCQUFnQixDQUFDRixXQUFXQyxTQUFTRjtBQUM1QztBQUVBLFNBQVNJLFFBQVFMLFdBQVcsRUFBRUMsT0FBTztJQUNuQyxJQUFNQyxZQUFZTixrQkFDWk8sVUFBVUgsYUFBYyxHQUFHO0lBRWpDLElBQUksQ0FBQ0ksZ0JBQWdCLENBQUNGLFdBQVdDLFNBQVNGO0FBQzVDO0FBRUEsU0FBU0ssU0FBU0MsYUFBYSxFQUFFTixPQUFPO0lBQ3RDLElBQU1DLFlBQVlMLG1CQUNaTSxVQUFVSSxlQUFnQixHQUFHO0lBRW5DLElBQUksQ0FBQ0gsZ0JBQWdCLENBQUNGLFdBQVdDLFNBQVNGO0FBQzVDO0FBRUEsU0FBU08sU0FBU0MsYUFBYSxFQUFFUixPQUFPO0lBQ3RDLElBQU1DLFlBQVlKLG1CQUNaSyxVQUFVTSxlQUFnQixHQUFHO0lBRW5DLElBQUksQ0FBQ0wsZ0JBQWdCLENBQUNGLFdBQVdDLFNBQVNGO0FBQzVDO0FBRUEsU0FBU1MsUUFBUVYsV0FBVyxFQUFFQyxPQUFPO0lBQ25DLElBQU1DLFlBQVlSLGlCQUNaUyxVQUFVSCxhQUFjLEdBQUc7SUFFakMsSUFBSSxDQUFDVyxtQkFBbUIsQ0FBQ1QsV0FBV0MsU0FBU0Y7QUFDL0M7QUFFQSxTQUFTVyxTQUFTWixXQUFXLEVBQUVDLE9BQU87SUFDcEMsSUFBTUMsWUFBWU4sa0JBQ1pPLFVBQVVILGFBQWMsR0FBRztJQUVqQyxJQUFJLENBQUNXLG1CQUFtQixDQUFDVCxXQUFXQyxTQUFTRjtBQUMvQztBQUVBLFNBQVNZLFVBQVVOLGFBQWEsRUFBRU4sT0FBTztJQUN2QyxJQUFNQyxZQUFZTCxtQkFDWk0sVUFBVUksZUFBZ0IsR0FBRztJQUVuQyxJQUFJLENBQUNJLG1CQUFtQixDQUFDVCxXQUFXQyxTQUFTRjtBQUMvQztBQUVBLFNBQVNhLFVBQVVMLGFBQWEsRUFBRVIsT0FBTztJQUN2QyxJQUFNQyxZQUFZSixtQkFDWkssVUFBVU0sZUFBZ0IsR0FBRztJQUVuQyxJQUFJLENBQUNFLG1CQUFtQixDQUFDVCxXQUFXQyxTQUFTRjtBQUMvQztBQUVBLElBQU1jLGNBQWM7SUFDbEJoQixRQUFBQTtJQUNBTSxTQUFBQTtJQUNBQyxVQUFBQTtJQUNBRSxVQUFBQTtJQUNBRSxTQUFBQTtJQUNBRSxVQUFBQTtJQUNBQyxXQUFBQTtJQUNBQyxXQUFBQTtBQUNGO0lBRUEsV0FBZUMifQ==